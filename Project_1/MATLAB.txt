Question 1:
octave:1> A = rand(3,3)
A =

   0.102257   0.909131   0.810950
   0.036929   0.268654   0.938878
   0.623464   0.565814   0.021984

octave:2> B = rand(4,4)
B =

   0.761800   0.422320   0.038468   0.055873
   0.358680   0.343011   0.799457   0.227262
   0.322774   0.577163   0.324573   0.196394
   0.657717   0.479947   0.604751   0.588128

octave:3> C = rand(5,5)
C =

   0.833212   0.717451   0.956547   0.239453   0.505002
   0.865401   0.026871   0.873138   0.652653   0.905997
   0.361852   0.737997   0.923354   0.463884   0.155061
   0.778871   0.070647   0.674868   0.727797   0.534159
   0.636183   0.129618   0.392718   0.701674   0.606702
octave:4> A(:,1) = A(:,1)/sum(A(:,1))
A =

   0.134081   0.909131   0.810950
   0.048422   0.268654   0.938878
   0.817497   0.565814   0.021984

octave:5> A(:,2) = A(:,2)/sum(A(:,2))
A =

   0.134081   0.521410   0.810950
   0.048422   0.154080   0.938878
   0.817497   0.324509   0.021984

octave:6> A(:,3) = A(:,3)/sum(A(:,3))
A =

   0.134081   0.521410   0.457695
   0.048422   0.154080   0.529897
   0.817497   0.324509   0.012408

octave:7> B(:,1) = B(:,1)/sum(B(:,1))
B =

   0.362594   0.422320   0.038468   0.055873
   0.170721   0.343011   0.799457   0.227262
   0.153631   0.577163   0.324573   0.196394
   0.313054   0.479947   0.604751   0.588128

octave:8> B(:,2) = B(:,2)/sum(B(:,2))
B =

   0.362594   0.231733   0.038468   0.055873
   0.170721   0.188215   0.799457   0.227262
   0.153631   0.316698   0.324573   0.196394
   0.313054   0.263354   0.604751   0.588128

octave:9> B(:,3) = B(:,3)/sum(B(:,3))
B =

   0.362594   0.231733   0.021767   0.055873
   0.170721   0.188215   0.452374   0.227262
   0.153631   0.316698   0.183660   0.196394
   0.313054   0.263354   0.342199   0.588128

octave:10> B(:,4) = B(:,4)/sum(B(:,4))
B =

   0.362594   0.231733   0.021767   0.052333
   0.170721   0.188215   0.452374   0.212860
   0.153631   0.316698   0.183660   0.183948
   0.313054   0.263354   0.342199   0.550859

octave:11> C(:,1) = C(:,1)/sum(C(:,1))
C =

   0.239737   0.717451   0.956547   0.239453   0.505002
   0.248999   0.026871   0.873138   0.652653   0.905997
   0.104115   0.737997   0.923354   0.463884   0.155061
   0.224102   0.070647   0.674868   0.727797   0.534159
   0.183047   0.129618   0.392718   0.701674   0.606702

octave:12> C(:,2) = C(:,2)/sum(C(:,2))
C =

   0.239737   0.426398   0.956547   0.239453   0.505002
   0.248999   0.015970   0.873138   0.652653   0.905997
   0.104115   0.438609   0.923354   0.463884   0.155061
   0.224102   0.041987   0.674868   0.727797   0.534159
   0.183047   0.077035   0.392718   0.701674   0.606702

octave:13> C(:,3) = C(:,3)/sum(C(:,3))
C =

   0.239737   0.426398   0.250364   0.239453   0.505002
   0.248999   0.015970   0.228533   0.652653   0.905997
   0.104115   0.438609   0.241676   0.463884   0.155061
   0.224102   0.041987   0.176638   0.727797   0.534159
   0.183047   0.077035   0.102789   0.701674   0.606702

octave:14> C(:,4) = C(:,4)/sum(C(:,4))
C =

   0.239737   0.426398   0.250364   0.085965   0.505002
   0.248999   0.015970   0.228533   0.234307   0.905997
   0.104115   0.438609   0.241676   0.166538   0.155061
   0.224102   0.041987   0.176638   0.261284   0.534159
   0.183047   0.077035   0.102789   0.251906   0.606702

octave:15> C(:,5) = C(:,5)/sum(C(:,5))
C =

   0.239737   0.426398   0.250364   0.085965   0.186560
   0.248999   0.015970   0.228533   0.234307   0.334696
   0.104115   0.438609   0.241676   0.166538   0.057283
   0.224102   0.041987   0.176638   0.261284   0.197331
   0.183047   0.077035   0.102789   0.251906   0.224130
---------------------------------------------------------------

Question 2:
octave:16> eigs(A)
ans =

   1.0000 +      0i
  -0.3497 + 0.1732i
  -0.3497 - 0.1732i

octave:17> eigs(B)
ans =

   1.0000 +      0i
   0.2378 + 0.0329i
   0.2378 - 0.0329i
  -0.1903 +      0i

octave:18> eigs(C)
ans =

   1.0000 +      0i
  -0.2232 +      0i
   0.0521 + 0.0946i
   0.0521 - 0.0946i
   0.1017 +      0i

octave:22>  [U, D] = eigs( A )
U =

   0.6129 +      0i   0.0526 - 0.2421i   0.0526 + 0.2421i
   0.4444 +      0i   0.6365 + 0.2421i   0.6365 - 0.2421i
   0.6534 +      0i  -0.6891 +      0i  -0.6891 -      0i

D =

Diagonal Matrix

   1.0000 +      0i                  0                  0
                  0  -0.3497 + 0.1732i                  0
                  0                  0  -0.3497 - 0.1732i

octave:23>  [U, D] = eigs( B )
U =

  -0.2458 +      0i   0.7913 +      0i   0.7913 -      0i  -0.3040 +      0i
  -0.4695 +      0i  -0.3685 + 0.1680i  -0.3685 - 0.1680i   0.7507 +      0i
  -0.3972 +      0i  -0.2877 + 0.1335i  -0.2877 - 0.1335i  -0.5728 +      0i
  -0.7492 +      0i  -0.1351 - 0.3015i  -0.1351 + 0.3015i   0.1261 +      0i

D =

Diagonal Matrix

   1.0000 +      0i                  0                  0                  0
                  0   0.2378 + 0.0329i                  0                  0
                  0                  0   0.2378 - 0.0329i                  0
                  0                  0                  0  -0.1903 +      0i

octave:24>  [U, D] = eigs( C )
U =

 Columns 1 through 4:

   0.5416 +      0i   0.2825 +      0i   0.6889 +      0i   0.6889 -      0i
   0.4602 +      0i  -0.6321 +      0i  -0.1322 + 0.0712i  -0.1322 - 0.0712i
   0.4549 +      0i   0.6452 +      0i   0.1626 + 0.2008i   0.1626 - 0.2008i
   0.3960 +      0i  -0.3218 +      0i  -0.2047 - 0.3508i  -0.2047 + 0.3508i
   0.3623 +      0i   0.0262 +      0i  -0.5147 + 0.0788i  -0.5147 - 0.0788i

 Column 5:

  -0.2457 +      0i
  -0.1872 +      0i
   0.7812 +      0i
   0.1678 +      0i
  -0.5160 +      0i

D =

Diagonal Matrix

 Columns 1 through 4:

   1.0000 +      0i                  0                  0                  0
                  0  -0.2232 +      0i                  0                  0
                  0                  0   0.0521 + 0.0946i                  0
                  0                  0                  0   0.0521 - 0.0946i
                  0                  0                  0                  0

 Column 5:

                  0
                  0
                  0
                  0
   0.1017 +      0i

Each matrix has an Eigenvalue of 1, which represents the steady state of the stochastic matrix, each matrix has one
As they all have a steady state


------------------------------------------------------------------------------------

Question 3:
octave:28>  [U, D] = eigs( A' )
U =

   0.5774 +      0i   0.7467 +      0i   0.7467 -      0i
   0.5774 +      0i  -0.4165 - 0.2548i  -0.4165 + 0.2548i
   0.5774 +      0i  -0.4172 + 0.1733i  -0.4172 - 0.1733i

D =

Diagonal Matrix

   1.0000 +      0i                  0                  0
                  0  -0.3497 + 0.1732i                  0
                  0                  0  -0.3497 - 0.1732i

octave:29>  [U, D] = eigs( B' )
U =

  -0.5000 +      0i  -0.2999 - 0.3284i  -0.2999 + 0.3284i   0.0145 +      0i
  -0.5000 +      0i  -0.5060 + 0.0116i  -0.5060 - 0.0116i   0.6324 +      0i
  -0.5000 +      0i  -0.3694 + 0.1895i  -0.3694 - 0.1895i  -0.7745 +      0i
  -0.5000 +      0i   0.6113 +      0i   0.6113 -      0i   0.0096 +      0i

D =

Diagonal Matrix

   1.0000 +      0i                  0                  0                  0
                  0   0.2378 + 0.0329i                  0                  0
                  0                  0   0.2378 - 0.0329i                  0
                  0                  0                  0  -0.1903 +      0i

octave:30>  [U, D] = eigs( C' )
U =

 Columns 1 through 4:

  -0.4472 +      0i   0.1850 +      0i   0.1133 - 0.2780i   0.1133 + 0.2780i
  -0.4472 +      0i  -0.8268 +      0i  -0.5300 - 0.0058i  -0.5300 + 0.0058i
  -0.4472 +      0i   0.1790 +      0i  -0.2236 + 0.1041i  -0.2236 - 0.1041i
  -0.4472 +      0i   0.0465 +      0i   0.6943 +      0i   0.6943 -      0i
  -0.4472 +      0i   0.4980 +      0i   0.0256 + 0.2922i   0.0256 - 0.2922i

 Column 5:

   0.4598 +      0i
  -0.2314 +      0i
  -0.5727 +      0i
  -0.2421 +      0i
   0.5903 +      0i

D =

Diagonal Matrix

 Columns 1 through 4:

   1.0000 +      0i                  0                  0                  0
                  0  -0.2232 +      0i                  0                  0
                  0                  0   0.0521 + 0.0946i                  0
                  0                  0                  0   0.0521 - 0.0946i
                  0                  0                  0                  0

 Column 5:

                  0
                  0
                  0
                  0
   0.1017 +      0i


When you take the transpose of a stochastic matrix, all the rows will sum to one (as its usually the columns)
When you multiply the matrix by the eigenvector  you should get the same vector (or a scalar)
As a result the corresponding eigenvector should have the same values (as you can factor out what ever constant)
-----------------------------------------------------------------------

Question 4:
No, it is not

As a stochastic matrix represents probabilities, the total probability of each row may not exceed 1
As a result the "volume" of the matrix shouldn't be able to increase, as that would represent a net probability > 1
Therefore, the eigenvalue can't exceed 1
Furthermore, the eigenvalue should represent the steady state, the eigenvalue was greater than 1, the result of 
Repeated multiplication would diverge
-----------------------------------------------------------------------

Question 5:
The result of running the Markov chain should the a scalar multiple of the eigenvector (steady state) with a magnitude of 1 to as the sum of all probabilities = 1


A: [0.358294 0.259763 0.381939]'
B: [0.132013 0.252185 0.213362 0.402441]'
C: [0.244511 0.207770 0.205363 0.178785 0.163569]'


template <unsigned int n>
vec<n> markov_chain(
    matrix<n, n> A,
    vec<n> v0,
    double eps_step,
    unsigned int max_iterations)
{
  // Ensure that 'A' represents a stocastic matrix
  //  - All entries are non-negative
  for (int j = 0; j < n; j++)
  {
    double sum = 0;
    for (int i = 0; i < n; i++)
    {
      if (A(i, j) < 0)
      {
        throw std::invalid_argument("Invalid Argument. 1");
      }
      sum += A(i, j);
    }
    if (abs(1 - sum) >= eps_step * n)
    {
      throw std::invalid_argument("Invalid Argument. 2");
    }
  }

  //    allowed error of eps_step
  vec<n> current;
  vec<n> last = v0;

  for (int i = 0; i < max_iterations; i++)
  {
    current = A * last;
    if (norm(current - last) < eps_step)
    {
      return current;
    }
    last = current;
  }
  throw std::invalid_argument("Invalid Argument. 3");
  // Iterate as necessary
  return vec<n>{};
}


